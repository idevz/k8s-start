# Calico Version v3.0.11
# https://docs.projectcalico.org/v3.0/releases#v3.0.11
# This manifest includes the following component versions:
#   calico/node:v3.0.11
#   calico/cni:v3.0.11
#   calico/kube-controllers:v3.0.11

# This ConfigMap is used to configure a self-hosted Calico installation.
kind: ConfigMap
apiVersion: v1
metadata:
  name: calico-config
  namespace: kube-system
data:
  # Configure this with the location of your etcd cluster.
  etcd_endpoints: "https://10.211.55.110:2379"

  # Configure the Calico backend to use.
  calico_backend: "bird"

  # The CNI network configuration to install on each node.
  cni_network_config: |-
    {
      "name": "k8s-pod-network",
      "cniVersion": "0.3.0",
      "plugins": [
        {
            "type": "calico",
            "etcd_endpoints": "__ETCD_ENDPOINTS__",
            "etcd_key_file": "__ETCD_KEY_FILE__",
            "etcd_cert_file": "__ETCD_CERT_FILE__",
            "etcd_ca_cert_file": "__ETCD_CA_CERT_FILE__",
            "log_level": "info",
            "mtu": 1500,
            "ipam": {
                "type": "calico-ipam"
            },
            "policy": {
                "type": "k8s",
                "k8s_api_root": "https://__KUBERNETES_SERVICE_HOST__:__KUBERNETES_SERVICE_PORT__",
                "k8s_auth_token": "__SERVICEACCOUNT_TOKEN__"
            },
            "kubernetes": {
                "kubeconfig": "__KUBECONFIG_FILEPATH__"
            }
        },
        {
          "type": "portmap",
          "snat": true,
          "capabilities": {"portMappings": true}
        }
      ]
    }

  # If you're using TLS enabled etcd uncomment the following.
  # You must also populate the Secret below with these files.
  etcd_ca: "/calico-secrets/etcd-ca"
  etcd_cert: "/calico-secrets/etcd-cert"
  etcd_key: "/calico-secrets/etcd-key"
---

# The following contains k8s Secrets for use with a TLS enabled etcd cluster.
# For information on populating Secrets, see http://kubernetes.io/docs/user-guide/secrets/
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: calico-etcd-secrets
  namespace: kube-system
data:
  # Populate the following files with etcd TLS configuration if desired, but leave blank if
  # not using TLS for etcd.
  # This self-hosted install expects three files with the following names.  The values
  # should be base64 encoded strings of the entire contents of each file.
  etcd-key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBc3ZjcGdmWjkrNnZpdlhHU2hGaGV2d25WNlNKdjQ4VlFQQ1FId2lXdjNZMFQvM1ljCm00elJiMFdFaEd3c2tPK0pyaGNJQVlyQzZra0RUS2RVYWFFK3FpVXRTY1pudy9hN0wzZUErYU9EbXpRaXhUbHMKc3pQMlgyYkRueFZzTHd5SkRQdTNGYk1zTERQblZ6L0FLVTdmK1VkSGJhWnkwS1gwU1RvRjZpOFNMaElndTJ2dgpTK2NIUkRPOER2aHQ4aSt5YkxxVS9uWXk5ajd6aXBTSURqUHorNzUvNmxIRDJwS3FGV3ArZitJN1kvRDQxQUhiCnFveEE3U0R4V1dxS3d5UStQWklRV2txRkdrTzdDYTlsUThLaHpyY1ArT3FPWndFeCszamEycnc1RTZqbWZ2SWEKc1BNM1dyQXlPRlRMbjZoRytDTFl0ZUxXWkdtQW5QSkg0VzcrSlFJREFRQUJBb0lCQVFDeHkvVnp4VVFTUlFqRgpOdERlSk1FMFAveEJXbElZMGsxTkFtcW15alEzQWxLc3lGWFJmNHdPWk4wcmhpQ2NlUzJxUS8xVE10MUVUdmMxCkwwUWdrTzRsc1R1V0FNUFVId3FHTk01d3RLOHFBUmpPSWFmSlBVVjJNQzBHbmd6VmpUbVhLWGdSMmVoM25iVW0KckJJbnQ5R3g0TXVvdHVWNFBuYzhUS1hWcTUvL0haK29GdmZDN0lKZ0R5b0VGL3NJbVp5dm5mTUpjRGdsSnZDNwo5cGI3RjA4SEk2UU5lYXNSdWx4MmJRM1pWL1hTOEN2THNqeEQ5cjFzRmlhM1MweVhvbWp0K2dvT293Tk1xK1AzCnhBQUFtd1hlYXNIeDVqNjR4Sjd5Ym1vN0lKNytoK2JMZlgzbHhaY09UN0ZKc3BNREpkNWRINWNXcHg5aW0ydUwKNXBkM25iamRBb0dCQU4vTnlza0pUMGUzeW85RTRVTXBDbjcza2h1b2k1Y3ZlRkc1WkdJTk16SXJQLzBEc1pBSAp0WXZoTW8yN2VEeEgyamdVWEhNN0t1bENERVQ5c3JNbGhBaU9ualVEL1V3WFJ6UnZVZ0VhU2dQQjBtQnlFMktoCjlFV2VVVm5MWHorVE1sVTgvSlVjZEpjaFIwVG9QNUdYbjBVNWc5QkpLWkJnNkc5N0JoUXVVN3dEQW9HQkFNeTIKRWRwbEtTTEFUek5qMTUrcmhpWGdSb0hHbTFEdmtwZ2lJZFl3TVMxMW1EbVpQbWtxY01OSHhncUM5UUhPc0tpNQp0WGxGUXhYUWFWM1NScFBPbHVDTmtqVnQ1WUlWTHEraEk3azB0MWsxb1FGR2libjVPcHpiZk56RnkybVdSQW1tCllMc0RXdzBQQ29JNkU2aTA2bnhURnJmWUV4N1diaFJPNWhVZjVvaTNBb0dCQUxiaEloRFBBN0syRTlhbzBXNGcKN2t1OEgrOXI5YzB2NUNEYjNwUms5dTNLKzduVHQ5ZmJCTlh0eW5LWXUzSit3R25NOFpMVHlZZmNDY3lpaHREdgpHZ29vQ0UySUdnYUFpeFhrMVZ6RFQ3SHNRdTIrcWVxU0x0cG91VThuNllnNHp3dHFEM2dGVFp4bGZDaHBvL0JqCnRxbEppMVc3UXpTUWk3NzFCNDJjSVo1akFvR0FKSTR5dS9RcWwxa09DNWc5cmZhY092RkV4ZkhvVkZpanJlVVMKYzhRaFZBUFd6aHBPYWNzNVhiWFlhSklnSEZXRGVHM0pPVUdrRENZdVdxR3RGc0hpY1hEMmRmSU05T0RCZUgxbQorckN1T1JENWtsZTlTbWQyRHdLbTFtbS92RGdvS0N6OHd3aURYdDZidXN1U0xTTTVhRUFTSTN4RFZkTm16dHVUCi9KdTR1QnNDZ1lCN0JRWjRNaUFLa3c5eldsazRzTVBWaHBVSkhidENaK01POXhLRmEzZ3NTNTExeFN4YzZGdXYKcUFlTHJCWExoYlY2TnRnTVlNdjhVNVVGR2pNcUlmWG01KzdTbWllTmNyWU9IcWlVdG5aQ2JlVjdGRi9ZT3RnegoxN1o3WnVOc1RUbW5ENGFHN3licUFLNVdGQlY3T2VvSEk4UUFKRUlRYXVIZ2pUd3JaU0hTaXc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  etcd-cert: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVwekNDQTQrZ0F3SUJBZ0lVUDRwSlRMM2g4RW9QM3Q4RG9Xc2Y3dURRVDFjd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1pURUxNQWtHQTFVRUJoTUNRMDR4RURBT0JnTlZCQWdUQjBKbGFVcHBibWN4RURBT0JnTlZCQWNUQjBKbAphVXBwYm1jeEREQUtCZ05WQkFvVEEyczRjekVQTUEwR0ExVUVDeE1HVTNsemRHVnRNUk13RVFZRFZRUURFd3ByCmRXSmxjbTVsZEdWek1CNFhEVEU1TVRJeU1EQXlNemN3TUZvWERUTTVNVEl4TlRBeU16Y3dNRm93Y0RFTE1Ba0cKQTFVRUJoTUNRMDR4RURBT0JnTlZCQWdUQjBKbGFVcHBibWN4RURBT0JnTlZCQWNUQjBKbGFVcHBibWN4RnpBVgpCZ05WQkFvVERuTjVjM1JsYlRwdFlYTjBaWEp6TVE4d0RRWURWUVFMRXdaVGVYTjBaVzB4RXpBUkJnTlZCQU1UCkNtdDFZbVZ5Ym1WMFpYTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDeTl5bUIKOW4zN3ErSzljWktFV0Y2L0NkWHBJbS9qeFZBOEpBZkNKYS9kalJQL2RoeWJqTkZ2UllTRWJDeVE3NG11RndnQgppc0xxU1FOTXAxUnBvVDZxSlMxSnhtZkQ5cnN2ZDRENW80T2JOQ0xGT1d5ek0vWmZac09mRld3dkRJa00rN2NWCnN5d3NNK2RYUDhBcFR0LzVSMGR0cG5MUXBmUkpPZ1hxTHhJdUVpQzdhKzlMNXdkRU03d08rRzN5TDdKc3VwVCsKZGpMMlB2T0tsSWdPTS9QN3ZuL3FVY1Bha3FvVmFuNS80anRqOFBqVUFkdXFqRUR0SVBGWmFvckRKRDQ5a2hCYQpTb1VhUTdzSnIyVkR3cUhPdHcvNDZvNW5BVEg3ZU5yYXZEa1RxT1orOGhxdzh6ZGFzREk0Vk11ZnFFYjRJdGkxCjR0WmthWUNjOGtmaGJ2NGxBZ01CQUFHamdnRkNNSUlCUGpBT0JnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGwKQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDTUFBd0hRWURWUjBPQkJZRQpGUGZKMkNhYi9mOHpNS3RxYmtubjRSb01TTnQzTUI4R0ExVWRJd1FZTUJhQUZJd3c4Vm9XSG5EN1JaSWhoaVp5CmUvRytLVXR3TUlHK0JnTlZIUkVFZ2JZd2diT0NDV3h2WTJGc2FHOXpkSUlLYTNWaVpYSnVaWFJsYzRJU2EzVmkKWlhKdVpYUmxjeTVrWldaaGRXeDBnaFpyZFdKbGNtNWxkR1Z6TG1SbFptRjFiSFF1YzNaamdoNXJkV0psY201bApkR1Z6TG1SbFptRjFiSFF1YzNaakxtTnNkWE4wWlhLQ0pHdDFZbVZ5Ym1WMFpYTXVaR1ZtWVhWc2RDNXpkbU11ClkyeDFjM1JsY2k1c2IyTmhiSWNFZndBQUFZY0VDdE0zYm9jRUNnRUFBWWNFQ3RNM2JvY0VDdE0zYjRjRUN0TTMKY0ljRUN0TTNBVEFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBVklsUmR3YlZJdmR6WkUzTlE3YURNTXZieit3YgowNEJYL2NWblRHeEI2L0xOU3l0TElLdk5Wb2c3UlE2S0dwVjFDaEYwRERSMmVYZTJOYkFNMHFBRVU4OSt2cnQzCktHS0oxV2hZMHJWWEl2eFhNeElhR05JWk9xN3JFZDJxZmIxblJjZVRLQ0hnNEV1d3BQbFB2YWlzM251VEJ6UWkKMDJIYjNZVkE0eXRMS3FXSHEwdkJBeXJnd0RjdWdQK1kyTDBIZ1c3V1duNjFtM0tkTE1Ha01ZUVZDeTRIZ3IxUwpXTWwrOGc3YWdoOG5uM21NV09NNktQdC9CVENic2lEQms0K1NKZjlrSnloU2Q1SGhObkt3OTdKZWtzbmVFUGd3Ck1Rc3pkNWVMRHJ6M3lqRlo3Vmxod1NuRGI2VjhQTzg0bGVJL1FkYjRvZUN1QUJEMmhOR1IwUlYxM0E9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  etcd-ca: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUR2akNDQXFhZ0F3SUJBZ0lVYldMa3ZVbkRHWlFJY3N6V3JBRXAwT2psYlpJd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1pURUxNQWtHQTFVRUJoTUNRMDR4RURBT0JnTlZCQWdUQjBKbGFVcHBibWN4RURBT0JnTlZCQWNUQjBKbAphVXBwYm1jeEREQUtCZ05WQkFvVEEyczRjekVQTUEwR0ExVUVDeE1HVTNsemRHVnRNUk13RVFZRFZRUURFd3ByCmRXSmxjbTVsZEdWek1CNFhEVEU1TVRJeU1EQXlNemN3TUZvWERUSTBNVEl4T0RBeU16Y3dNRm93WlRFTE1Ba0cKQTFVRUJoTUNRMDR4RURBT0JnTlZCQWdUQjBKbGFVcHBibWN4RURBT0JnTlZCQWNUQjBKbGFVcHBibWN4RERBSwpCZ05WQkFvVEEyczRjekVQTUEwR0ExVUVDeE1HVTNsemRHVnRNUk13RVFZRFZRUURFd3ByZFdKbGNtNWxkR1Z6Ck1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBN1Q5YUhURStlMjVnMjE5Q2pXT3gKZVRHM2VtelUrZlZaZzdvZTd1ZTJRRnZPWnRvcmtYa2FDanRVaDhVaXZhNFhrdDhoMmo1ZVJ3aU1JRkJnMVVBTwp0UzN5M1BqbDlMVktDcHpxR2lGTFdqVlVGTVFST2tYTUwxeE50eUgrMlM1UXdRMEJqTXNhRnBwNXpObGdFZzZHCkdXcFl6bkhxZHB2eXpIazJFOHV0YXZXbk5mTDQ2Q2x4ZmI2SXdraXBJS1pvNHc3eFdBNmo0ZHZ1WFFVME1hSUIKRkRmRUpnOHRJUm1ua21mbklrUWt4dHorMU9UdGd2OElWd3ZGSy83ZVVEWTZaM3RldU5QcEdhZFFidnpwRVgvZwp2RFpoQ0tUS042WkZUd1JjTjhqV3ZhTjNFbDU1TTM4YXRQSjd5MkRSTWM2MkxFQjZISCt1WEx1ZlR1V1poblMxCjF3SURBUUFCbzJZd1pEQU9CZ05WSFE4QkFmOEVCQU1DQVFZd0VnWURWUjBUQVFIL0JBZ3dCZ0VCL3dJQkFqQWQKQmdOVkhRNEVGZ1FVakREeFdoWWVjUHRGa2lHR0puSjc4YjRwUzNBd0h3WURWUjBqQkJnd0ZvQVVqRER4V2hZZQpjUHRGa2lHR0puSjc4YjRwUzNBd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFONkxwZ0J3UTVwYlg5ZlRjTDdrCmx4M25wMmtVZ0Z2NUUxVWJyYWxCaXdwMlkrUUdmTTBTSnBrVG5PWXA5K3IzOUVFd2JJYzJMa1BycGFRZkdSVnkKQVN6djFUejY3aEZ2VEdRVUhOSUFxMlpVZjVMMkU1NG53UEJ3R3J0ZktqS3RvRWdQbmcwN3ZFbHIzaG9pUGhBcAplbnZ0dGpNUzJOZGpUVlRTd1hmSnlFTktSbm5VY05Tb3BaTzlxTmFDTk5PSEx3amZ4eFNCM24wK0RmUzdlNmQ3Ci8vdmljbml5ZnBEWDhTemtYVmRXM0hQYXBwa2tTNVRWTWQ3eDFmdzVEZjJpcW5ZRjlPWVNkZzFIVGUzNk5jdGoKc0lFOFNYTTU1eFJiTUhuZmEvN0swMDg0RE1IdEpua0FDby9VL0loWGpGUUdBdGFqelcxMzk3Z1VKeGwrenJybgpmdjQ9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K

---

# This manifest installs the calico/node container, as well
# as the Calico CNI plugins and network config on
# each master and worker node in a Kubernetes cluster.
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: calico-node
  namespace: kube-system
  labels:
    k8s-app: calico-node
spec:
  selector:
    matchLabels:
      k8s-app: calico-node
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        k8s-app: calico-node
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      hostNetwork: true
      tolerations:
        # Make sure calico/node gets scheduled on all nodes.
        - effect: NoSchedule
          operator: Exists
        # Mark the pod as a critical add-on for rescheduling.
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          operator: Exists
      serviceAccountName: calico-node
      # Minimize downtime during a rolling upgrade or deletion; tell Kubernetes to do a "force
      # deletion": https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods.
      terminationGracePeriodSeconds: 0
      containers:
        # Runs calico/node container on each Kubernetes node.  This
        # container programs network policy and routes on each
        # host.
        - name: calico-node
          image: quay.io/calico/node:v3.0.11
          env:
            # The location of the Calico etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # Choose the backend to use.
            - name: CALICO_NETWORKING_BACKEND
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: calico_backend
            # Cluster type to identify the deployment type
            - name: CLUSTER_TYPE
              value: "k8s,bgp"
            # Disable file logging so `kubectl logs` works.
            - name: CALICO_DISABLE_FILE_LOGGING
              value: "true"
            # Set noderef for node controller.
            - name: CALICO_K8S_NODE_REF
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            # Set Felix endpoint to host default action to ACCEPT.
            - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
              value: "ACCEPT"
            # The default IPv4 pool to create on startup if none exists. Pod IPs will be
            # chosen from this range. Changing this value after installation will have
            # no effect. This should fall within `--cluster-cidr`.
            - name: CALICO_IPV4POOL_CIDR
              value: "10.2.0.0/16"
            - name: CALICO_IPV4POOL_IPIP
              value: "Always"
            # Disable IPv6 on Kubernetes.
            - name: FELIX_IPV6SUPPORT
              value: "false"
            # Set Felix logging to "info"
            - name: FELIX_LOGSEVERITYSCREEN
              value: "info"
            # Set MTU for tunnel device used if ipip is enabled
            - name: FELIX_IPINIPMTU
              value: "1440"
            # Location of the CA certificate for etcd.
            - name: ETCD_CA_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_ca
            # Location of the client key for etcd.
            - name: ETCD_KEY_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_key
            # Location of the client certificate for etcd.
            - name: ETCD_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_cert
            # Auto-detect the BGP IP address.
            - name: IP
              value: "autodetect"
            - name: IP_AUTODETECTION_METHOD
              value: "can-reach=i.api.weibo.com"
            - name: FELIX_HEALTHENABLED
              value: "true"
            - name: FELIX_HEALTHPORT
              value: "29099"
          securityContext:
            privileged: true
          resources:
            requests:
              cpu: 250m
          livenessProbe:
            httpGet:
              path: /liveness
              port: 29099
            periodSeconds: 10
            initialDelaySeconds: 10
            failureThreshold: 6
          readinessProbe:
            httpGet:
              path: /readiness
              port: 29099
            periodSeconds: 10
          volumeMounts:
            - mountPath: /lib/modules
              name: lib-modules
              readOnly: true
            - mountPath: /var/run/calico
              name: var-run-calico
              readOnly: false
            - mountPath: /calico-secrets
              name: etcd-certs
        # This container installs the Calico CNI binaries
        # and CNI network config file on each node.
        - name: install-cni
          image: quay.io/calico/cni:v3.0.11
          command: ["/install-cni.sh"]
          env:
            # Name of the CNI config file to create.
            - name: CNI_CONF_NAME
              value: "10-calico.conflist"
            # The location of the Calico etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # The CNI network config to install on each node.
            - name: CNI_NETWORK_CONFIG
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: cni_network_config
          volumeMounts:
            - mountPath: /host/opt/cni/bin
              name: cni-bin-dir
            - mountPath: /host/etc/cni/net.d
              name: cni-net-dir
            - mountPath: /calico-secrets
              name: etcd-certs
      volumes:
        # Used by calico/node.
        - name: lib-modules
          hostPath:
            path: /lib/modules
        - name: var-run-calico
          hostPath:
            path: /var/run/calico
        # Used to install CNI.
        - name: cni-bin-dir
          hostPath:
            path: /opt/cni/bin
        - name: cni-net-dir
          hostPath:
            path: /etc/cni/net.d
        # Mount in the etcd TLS secrets.
        - name: etcd-certs
          secret:
            secretName: calico-etcd-secrets

---

# This manifest deploys the Calico Kubernetes controllers.
# See https://github.com/projectcalico/kube-controllers
apiVersion: apps/v1
kind: Deployment
metadata:
  name: calico-kube-controllers
  namespace: kube-system
  labels:
    k8s-app: calico-kube-controllers
  annotations:
    scheduler.alpha.kubernetes.io/critical-pod: ''
    scheduler.alpha.kubernetes.io/tolerations: |
      [{"key": "dedicated", "value": "master", "effect": "NoSchedule" },
       {"key":"CriticalAddonsOnly", "operator":"Exists"}]
spec:
  selector:
    matchLabels:
      k8s-app: calico-kube-controllers
  # The controllers can only have a single active instance.
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      name: calico-kube-controllers
      namespace: kube-system
      labels:
        k8s-app: calico-kube-controllers
    spec:
      # The controllers must run in the host network namespace so that
      # it isn't governed by policy that would prevent it from working.
      hostNetwork: true
      serviceAccountName: calico-kube-controllers
      containers:
        - name: calico-kube-controllers
          image: quay.io/calico/kube-controllers:v3.0.11
          env:
            # The location of the Calico etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # Location of the CA certificate for etcd.
            - name: ETCD_CA_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_ca
            # Location of the client key for etcd.
            - name: ETCD_KEY_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_key
            # Location of the client certificate for etcd.
            - name: ETCD_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_cert
            # Choose which controllers to run.
            - name: ENABLED_CONTROLLERS
              value: policy,profile,workloadendpoint,node
          volumeMounts:
            # Mount in the etcd TLS secrets.
            - mountPath: /calico-secrets
              name: etcd-certs
      volumes:
        # Mount in the etcd TLS secrets.
        - name: etcd-certs
          secret:
            secretName: calico-etcd-secrets

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: calico-kube-controllers
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
    addonmanager.kubernetes.io/mode: Reconcile
  name: system:calico-kube-controllers
rules:
- apiGroups:
  - ""
  resources:
  - endpoints
  - services
  - pods
  - namespaces
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
- apiGroups:
  - "extensions"
  resources:
  - networkpolicies
  verbs:
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
    addonmanager.kubernetes.io/mode: EnsureExists
  name: system:calico-kube-controllers
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:calico-kube-controllers
subjects:
- kind: ServiceAccount
  name: calico-kube-controllers
  namespace: kube-system
---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: calico-node
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
    addonmanager.kubernetes.io/mode: Reconcile
  name: system:calico-node
rules:
- apiGroups:
  - ""
  resources:
  - endpoints
  - services
  - pods
  - namespaces
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  - nodes
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
    addonmanager.kubernetes.io/mode: EnsureExists
  name: system:calico-node
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:calico-node
subjects:
- kind: ServiceAccount
  name: calico-node
  namespace: kube-system

